Για την υλοποίηση της 3ης εργασίας χρησιμοποίησα έναν visitor, τον LLVMvisitor ο οποίος εχει visit με ορισμα String και τύπο επιστροφής Node. Το Node ειναι δικη μου κλάση η οποια περιεχει το ονομα και τον τυπο μιας μεταβλητης, τα οποια χρειαζεται να επιστρεφει στον πατερα του ενας κομβος του Abstract Syntax Tree. Το όρισμα χρειάζεται μονο στις περιπτωσεις left,right εκφράσεων σε αναθέσεις για να επιστρέφω διευθυνση η value. Γι αυτη τη διαδικασία καλω την συναρτηση convert η οποια επιστρέφει τον σωστό τύπο καθως και τον σωστό αριθμο "*". Ξεκινώντας η μετατροπή σε ενδιάμεσο κώδικα, καλώ  την συνάρτηση vtableDecl η οποια περνάει απο ολο το symbol table που φτιαχτηκε στον TypeChecker και κανει τη δήλωση των Vtable. Στη  συνέχεια ξεκινάει η μετάφραση του κώδικα. Για Labels και τοπικές μεταβλητές εχω τις συναρτησεις getLabel() και getVar() αντιστοιχα, οι οποιες αυξάνουν η καθε μια εναν μετρητη οι οποιοι ειναι πεδία του visitor. Ως πεδία επίσης χρησιμοποιουνται τα πεδια currClass,mainClass,currMethod,currObjType,argStack.
currClass: αντιπροσωπεύει τη κλάση στης οποιας το σώμα βρισκόμαστε, χρησιμεύει για να "τραβαμε" σωστά απ το Symbol Table.
mainClass: το όνομα της κλασης που περιέχει την main συναρτηση. Χρησιμεύει μόνο για να ειδικό handle για αναγνώριση τοπικών μεταβλητών της main.
currMethod: το ονομα της μεθόδου στην οποία βρισκόμαστε, χρησιμεύει για να "τραβαμε" απ το symbol table τις τοπικές μεταβλητές της μεθόδου
currObjType: ειναι όνομα κλασης, και χρησιμευει για να ξερουμε σε ποιου τυπου αντικείμενο γινεται ενα MessageSend. Κάθε τύπος πανω στον οποίο θα μπορόυσε να εκτελεστεί ενα MessageSend αλλαζει αυτό το πεδίο.
argStack: στοιβα στην οποία γινονται push τα nodes που παιρνουν οι visit για τα ορίσματα της συναρτησης που καλείται σε ενα MessageSend. Αφου μπουν ολα, η visit για το MessageSend θα ειναι αυτη η οποια θα τα κανει emit.
Τελος, χρησιμοποιείται και ενας BufferedWriter για να γραφουμε στο εκάστοτε αρχείο.
